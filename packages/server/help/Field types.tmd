Every field in a table stores values of a specific type. The type limits which
values this field can take in each row. For instance, if a field has a type `Integer`
then it cannot take the value `"Simon"` but the value `17` is admissible. 

When building your table, you must therefore think carefully about not only which fields
to include but also what the types are. Sometimes this is easy - you know that names 
should be stored as as `String` type. But at other times you need to think ahead a bit 
and think carefully about what data your table will hold

Some types are more general than others. The `String` type and the `JSON` 
type (from the json module) can hold values that can be represented by more specific types.
For instance the number 17 can be stored in a string field where it will be represented by the 
string `"17"`. You should always try to use the most specific type available. This will give 
you access to user interface elements that are richer and more appropriate for the data in the 
given field. For example, you could use `String` to store dates, but then you will not 
be able to use an interactive date picker or to display dates in flexible formats.

These types are available in your current installation:

{{# const tys = Object.values(scState.types) }}
{{# for (const ty of tys) { }} 
* {{ ty.name }}{{ty.description ? `: ${ty.description}` : ""}}
{{# } }}

Further types can be installed from moduels in the [Module store](/plugins)