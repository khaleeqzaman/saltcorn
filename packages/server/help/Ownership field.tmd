The ability to read or write to tables is normally limited by the settings 
for "Minimum role to read" and "Minimum role to write", which is compared 
to the user's role.

In some cases you want some users wo be able to read and write to some but 
not to all rows. Some examples are:

* On a blog, Users should be able to create comments and to edit comments they have made.
  But you do not want users to be able to edit another user's comments.

* In a todo list, Users should be able to create and edit new items for themselves but 
  they should not be able to read or edit items for other users. 

* In a project management app, you may only want you supposed to be able to see and 
  contribute to projects they have been assigned to.

Saltcorn contains an authorization system that can be very simple (limit everything by role),
slightly more flexible (rows have a user field and if you are that user, you can edit a row)
to very complex (featuring many-to-many relationships, where the user field can be on a 
different table; and inheritance, where authorization schemes propagate through relationship).

### Role-based authorization

In Saltcorn, every user has a role and the roles have a strictly hierachical ordering, 
which you [can edit](/roleadmin). By 
using the "Minimum role to read" and "Minimum role to write" settings for the table, you 
can create a role cutoff limit for access. See the help topics for those settings for details.

### Simple user field ownership

In the simplest deviation from role-based authorization, you can grant access to edit 
a row to users that match a Key to users field on the row. To use this, you should:

1. Set the "Minimum role to read" and "Minimum role to write" to a role that would stop the 
   user from accessing the row. 

2. Create a field with type Key to users. 

3. Make sure this is filled in when the user creates the row.
   For instance in an Edit view under the "Fixed and blocked fields" settings, in the 
   Preset for this field pick the LoggedIn preset.

4. Pick this field as the Ownership field from the dropdown.

This is an additional access grant
in addition to that given by the minimum roles to read and write. If your user does *not* 
match the designated field, The decision to grant access reverts to the role-based settings. 
You therefore cannot use ownership to limit access, only to grant additional access.

### Authorization by inheritance

